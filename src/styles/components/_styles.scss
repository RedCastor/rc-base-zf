//
// Title
// --------------------------------------------------

$base-styles: () !default;

// Get Styles merged with header styles
@function build_base-styles_with_header-styles($base-styles, $header-styles) {

  @each $size, $headers in $header-styles {

    $-base-styles: ();

    @if map-has-key($base-styles, $size) {
      $-base-styles: map-get($base-styles, $size);
    }

    @each $header, $header_style in $headers {
      $base-style: map-get($-base-styles, $header);

      @if type-of($base-style) == "map" {
        $-style: null;
        @if map-has-key($base-style, "style") {
          $-style: map-get($base-style, "style");
        }

        @if type-of($-style) != "map" {
          $-style: ();
        }

        $-style: map-merge($-style, $header_style);

        $base-style: map-merge($base-style, ("style": $-style));
      }
      @else {
        $base-style: ("selectors": ("#{$header}", ".#{$header}"), "style": $header_style, "proto": false);
      }

      $-base-styles: map-merge($-base-styles, ($header: $base-style));
    }

    $base-styles: map-merge($base-styles, ($size: $-base-styles));
  }
  @return $base-styles;
}

$base-styles: build_base-styles_with_header-styles($base-styles, $header-styles);

// Get base style by key and property
@function get-style-prop($key: "p", $prop: "font-size", $default: false, $size: small) {

  $-base-styles: -zf-get-bp-val($base-styles, $size);

  @if map-has-key($-base-styles, $key) {
    $-base-style: map_get($-base-styles, $key);

    @if map-has-key($-base-style, "style") {
      $-style: map_get($-base-style, "style");

      @if map-has-key($-style, $prop) {
        $-prop-val: map_get($-style, $prop);

        @if $prop == "font-size" and type-of($-prop-val) == "number" {
          @if unit($-prop-val) != "px" or unit($-prop-val) != "%" {
            $-prop-val: rem-calc($-prop-val);
          }
        }

        @return $-prop-val;
      }
    }
  }

  @return $default;
}

/** Get base style font weight */
@function get-style-font-weight($type: "regular", $family: null) {

  @if $family == null and map-has-key($base-font, family) {

    $family: map-get($base-font, family);
  }

  @if $family {

    @each $key, $-base-font in $base-font-stack {

      @if type-of($-base-font) == "map" and map-has-key($-base-font, family) and map-has-key($-base-font, type) {

        @if $type == map-get($-base-font, type) {

          @return map-get($-base-font, font-weight);
        }
      }
    }
  }

  @return null;
}

/** Mixin style property */
@mixin style-prop($key: "p", $prop: "font-size", $default: false, $size: null) {

  @if map-has-key($breakpoints, $size) {
    $-val: get-style-prop($key, $prop, $default, $size);

    @if $-val {
      #{$prop}: $-val;
    }
  }
  @else {
    @include -zf-each-breakpoint() {

      $-val: get-style-prop($key, $prop, $default, $-zf-size);

      @if $-val {
        #{$prop}: $-val;
      }
    }
  }
}

/** Mixin style properties */
@mixin style-props($key: "p", $size: small) {

  @if map-has-key($breakpoints, $size) {

    $-base-styles: map-get($base-styles, $size);
    $-base-style: map-get($-base-styles, $key);
    $-style-props: map-get($-base-style, "style");

    @if type-of($-style-props) == "map" {
      @each $-prop, $-prop-val in $-style-props {
        $-val: get-style-prop($key, $-prop, false, $size);

        @if $-val {
          #{$-prop}: $-val;
        }
      }
    }
  }
}

/** Mixin style font weight */
@mixin style-font-weight($type: "regular", $family: null) {

  $-weight: get-style-font-weight($type, $family);

  @if $-weight {
    font-weight: $-weight;
  }
}

@mixin style-classes($selector: "h3", $prefix-selector: ".text", $style-keys: null) {

  @if type-of($style-keys) != "map" {
    $style-keys: ("h1", "h2", "h3", "h4", "h5", "h6");
  }

  @include -zf-each-breakpoint() {
    $-base-styles: -zf-get-bp-val($base-styles, $-zf-size);

    @include breakpoint($-zf-size) {
      @each $key, $-base-style in $-base-styles {

        @if index($style-keys, $key)!= null {
          $-style-props: map-get($-base-style, "style");

          @if type-of($-style-props) == "map" {
            #{$prefix-selector}-#{$key}--#{$selector} {
              #{$selector} {
                @each $-prop, $-prop-val in $-style-props {
                  @include style-prop($key, $-prop);
                }
              }
            }
          }
        }
      }
    }
  }
}

/** Mixin style classes */
@mixin base-style-classes() {

  @include -zf-each-breakpoint() {
    $-base-styles: -zf-get-bp-val($base-styles, $-zf-size);

    @include breakpoint($-zf-size) {
      @each $key, $-base-style in $-base-styles {

        @if map-has-key($-base-style, "proto") {
          $-proto: map-get($-base-style, "proto");

          @if $-proto == true {

            $-selectors: null;

            @if map-has-key($-base-style, "selectors") {
              $-selectors: map-get($-base-style, "selectors");
            }

            @if type-of($-selectors) != "map" and type-of($-selectors) != "string" {
              $-selectors: ("#{$key}", ".#{$key}");
            }

            #{$-selectors} {
              &.text-body {
                font-family: $body-font-family;
              }

              &.text-header {
                font-family: $header-font-family;
              }

              &.text-title {
                font-family: $title-font-family;
              }

              @each $prop_val in (uppercase, inherit, none, capitalize, lowercase) {
                &.text-#{$prop_val} {
                  text-transform: #{$prop_val};
                }
              }
            }

            .text-body--#{$key} {
              #{$-selectors} {
                font-family: $body-font-family;
              }
            }

            .text-header--#{$key} {
              #{$-selectors} {
                font-family: $header-font-family;
              }
            }

            .text-title--#{$key} {
              #{$-selectors} {
                font-family: $title-font-family;
              }
            }

            @each $prop_val in (uppercase, inherit, none, capitalize, lowercase) {
              .text-#{$prop_val}--#{$key} {
                #{$-selectors} {
                  text-transform: #{$prop_val};
                }
              }
            }
          }
        }
      }
    }
  }
}
